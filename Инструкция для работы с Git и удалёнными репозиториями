# **Инструкция для работы с Git и удалёнными репозиториями**

## **Что такое Git?**
***Git*** - это одна из реализаций распределённых систем контроля версий, имеющая как и локальные, так и удалённые репозитории. Является самой популярной реализацией систем контроля версий в мире.

## **Подготовка репозитория**
Для создание репозитория необходимо выполнить команду ***git init***  в папке с репозиторием и у Вас создаться репозиторий (появится скрытая папка .git).

## **Создание коммитов**

### **Git add**
Для добавления измений в коммит используется команда ***git add***. Чтобы использовать команду ***git add*** напишите ***git add <имя файла>***.

### **Просмотр состояния репозитория**
Для того, чтобы посмотреть состояние репозитория используется команда ***git status***. Для этого необходимо в папке с репозиторием написать ***git status***, и Вы увидите были ли измения в файлах, или их не было.

### **Создание коммитов**
Для того, чтобы создать коммит(сохранение) необходимо выполнить команду ***git commit***. Выполняется она так: ***git commit -m "<сообщение к коммиту>***. ***"-m"*** означает ***message*** т.е. сообщение. Все файлы для коммита должны быть ***ДОБАВЛЕНЫ*** и сообщение к коммиту писать ***ОБЯЗАТЕЛЬНО***.

## **Ветки в Git**

## **Создание новой ветки**
По стандарту любая ветка называется ***master***, но можно создать дополнительные, при неообходимости. Для этого в папке с репозиторием используем команду ***git branch <Название ветки>***, эта команда создаст точную копию ветки ***master***.

## **Проверка существующих веток**
Для того, чтобы проверить, какие ветки существуют в файле, необходимо написать команду, в командной строке, ***git branch***. В командной строке появится список доступных веток ***branch***.

## **Слияние веток**
Для того чтобы дабавить ветку в текущую ветку используется команда ***git merge <name branch>***.

## **Удаление веток**
Для удаления ветки ввести команду ***"git branch -d 'name branch'"***.

## **Возвращение к рабочей версии файла**
Для того, чтобы вернуться к рабочей версии файла, необходимо, используя командную строку, написать команду ***git checkout master***. По стандарту являетесь ***master*** на компьютере, но лучше в этом убедиться сперва командой ***git status***, т.к. можно изменять названия ветки ***branch***.

## **Перемещение между сохранениями**
Для того, чтобы перемещаться между коммитами, используется команда ***git checkout***. Используется она в папке с репозиторием следующим образом: ***git checkout <номер коммита>***.

## **Журнал изменений**
Для того, чтобы посмтреть все сделанные изменения в репозитории, используется команда ***git log***. Для этого достаточно выполнить команду ***git log*** в папке с репозиторием.

## **Основные команды Git**
1. ***git init*** - инициализация локального репозитория;
2. ***git status*** - получение информации от git о его текущем состоянии;
3. ***git add*** - добавить файл или файлы к следующему коммиту;
4. ***git commit -m "message"*** - создание коммита;
5. ***git log*** - вывод на экран истории всех коммитов с их хеш-кодами;
6. ***git checkout*** - переход от одного коммита к другому;
7. ***git checkout master*** - вернуься к актуальному состоянию и продолжить работу;
8. ***git diff*** - увидеть разницу между текущим файлом и закоммиченным файлом.

## **Синтаксис языка Markdown**
Справочник по Markdown от Microsoft:
 *https://docs.microsoft.com/ru-ru/contribute/markdown-reference*
* **#Заголовок** - выделение заголовков. Количество символов "#" задает уровень заголовка (поддерживается 6 уровней);
* **= или -** - подчеркиванием этими словами (не менее 3 подряд) выделяют заголовки первого ("=") или второго ("-") уровней;
* ****Полужирное начертание** ** или ____Полужирное начертание__ __ ;
* **Курсивное начертание* * или _ _Курсивное начертание_ _ ;
* *** ***Полужирное курсивное начертание*** *** ;
* ~~ **Зачеркнутый текст** ~~ ;
* *Строка - ненумерованные списки, символ " * " в начале строки ;
* ***1, 2, 3 ...*** - нумерованные списки.
